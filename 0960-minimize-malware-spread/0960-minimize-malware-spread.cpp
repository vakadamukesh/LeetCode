class Solution {
public:
    int cnt;
    void dfs(vector<int> adj[], int curr, vector<int>& visited, int assgn){
        visited[curr] = assgn;
        cnt++;

        for(auto el:adj[curr]){
            if(visited[el]==-1){
                dfs(adj, el, visited, assgn);
            }
        }
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int nodes = graph.size();

        vector<int> adj[nodes+1];

        for(int i=0;i<nodes;i++){
            for(int j=0;j<nodes;j++){
                if(graph[i][j]==1){
                    adj[i+1].push_back(j+1);
                }
            }
        }

        vector<int> visited(nodes+1, -1);

        map<int,pair<int,int>> assign;

        int assgn = 1;

        for(auto el: initial){
            if(visited[el+1] == -1){
                cnt = 0;
                dfs(adj, el+1, visited, assgn);
                assign[assgn].first = cnt;
                assign[assgn].second += 1;
            }
            else{
                assign[visited[el+1]].second += 1;
            }
            assgn++;
        }

        sort(initial.begin(),initial.end());

        int ans = -1;

        int finalSaves = -1;

        for(auto el:initial){
            int getAssignmentNumber = visited[el+1];
            int totalInfected = assign[getAssignmentNumber].second;
            int groupSize = assign[getAssignmentNumber].first;
            if(totalInfected == 1){
                if(groupSize > finalSaves){
                    ans  = el+1;
                    finalSaves = groupSize;
                }
            }
        }

        if(ans==-1){
            return initial[0];
        }

        return ans-1;
    }
};